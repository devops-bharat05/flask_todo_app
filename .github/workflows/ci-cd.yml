# .github/workflows/ci-cd.yml

name: CI/CD Pipeline for Flask To-Do List App

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest tests/test_app.py

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to Staging
      env:
        FLASK_APP: app.py
        ENV_VAR: ${{ secrets.STAGING_ENV_VAR }}
      run: |
        # Add deployment commands here, e.g., SSH to server or call deployment API
        echo "Deploying to staging environment"

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to Production
      env:
        FLASK_APP: app.py
        ENV_VAR: ${{ secrets.PRODUCTION_ENV_VAR }}
      run: |
        # Add deployment commands here, e.g., SSH to server or call deployment API
        echo "Deploying to production environment"
